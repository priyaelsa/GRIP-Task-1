# -*- coding: utf-8 -*-
"""GRIP Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ZvmIVGb4cAjjdJZQ9Q_JzYyZQ5jju25

# **Task 1**
**Prediction using Supervised ML**

Prediction using Supervised Machine Learning to predict the percentage of marks that a student is expected to score based upon the number of hours they studied.

To predict, we'll use Linear Regression with Python Scikit Learn.

**Linear Regression with Python Scikit Learn**

Using Python Scikit-Learn library for machine learning to implement regression functions. We will start with simple linear regression involving two variables.

**Simple Linear Regression**

In this regression task we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.

## **Data Preprocessing**
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all libraries required in this notebook
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

"""#### **Data Loading & Preparing**"""

# Reading data from remote link
url = "http://bit.ly/w-data"
data = pd.read_csv(url)

data.head

data.shape

data.info()

data.duplicated().sum()

data.describe()

"""## **Data Visualization**"""

# Plotting the distribution of scores
data.plot(x='Hours', y='Scores', style='h')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""From the graph above, we can clearly see that there is a positive linear relation between the number of hours studied and percentage of score.

**Preparing the data**

The next step is to divide the data into "attributes" (inputs) and "labels" (outputs).
"""

X = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values

"""Now that we have our attributes and labels, the next step is to split this data into training and test sets. We'll do this by using Scikit-Learn's built-in train_test_split() method:"""

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.2, random_state=0)

"""**Training the Algorithm**

We have split our data into training and testing sets, and now is finally the time to train our algorithm.
"""

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training complete.")

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

"""## **Predicting the Model**

Now that we have trained our algorithm, it's time to make some predictions.
"""

print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

"""**What will be predicted score if a student studies for 9.25 hrs/ day?**"""

import numpy as np

# Assume that the trained model is stored in the 'regressor' variable
hours = 9.25
hours_array = np.array(hours).reshape(1, -1)
predicted_score = regressor.predict(hours_array)

print("Predicted score if a student studies for 9.25 hours/day: {}".format(predicted_score[0]))

"""## **Evaluating the model**

The final step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset. For simplicity here, we have chosen the mean_absolute_error,  mean_squared_error,  r2_score. There are many such metrics.
"""

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""Assume that y_test and y_pred are the actual and predicted scores, respectively"""

mae = mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error: {}".format(mae))

mse = mean_squared_error(y_test, y_pred)
print("Mean squared Error: {}".format(mse))

score_model_test = r2_score(y_pred, y_test)
print("Score of testing data : ", score_model_test*100)
score_model_train = r2_score(y_pred, y_test)
print("Score of testing data : ", score_model_train*100)